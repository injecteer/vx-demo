plugins {
  id 'vx.demo.groovy-node-conventions'
}

File markupFile = file './mermaid.md'

task projectGraphMarkup {
  group 'documentation'
  description 'Generates markup file for project dependency graph'
  
  doLast{
    def links = []
    def projects = new TreeSet()
    project.subprojects.each{ module ->
      boolean isLibrary = module.plugins.hasPlugin 'java-library'
      String icon = isLibrary ? 'ðŸ“š' : module.name.contains( 'mothership' ) ? 'ðŸ—²ðŸ›¸' : 'ðŸ—²'
      projects << """$module.name["$icon $module.name"]"""
      projects << """$module.name-info(["ðŸ›ˆ ${module.description.split( /\s/ ).collate( 5 )*.join( ' ' ).join( '<br>' )}"]):::ext"""
      links << "$module.name -.- $module.name-info"
      
      def extLinks = new TreeSet()
      [ 'api', 'implementation' ].each{ type -> 
        module.configurations.findByName( type )?.dependencies?.each{
          it.hasProperty( 'dependencyProject' ) ? links << "$module.name --> $it.name" : extLinks << it.name
        }
      }
      
      if( extLinks ){
        projects << """$module.name-ext["ðŸ”— ${extLinks.join( '<br>' )}"]:::ext"""
        links << "$module.name .-> $module.name-ext"
      }
    }
    
    markupFile.createNewFile()
    markupFile.withWriter( 'UTF-8' ){
      it << '```mermaid\n'
      it << 'flowchart BT'
      it << '\n\tclassDef ext font-size:x-small, color:#888'
      it << '\n\t' << projects.join( '\n\t' )
      it << '\n\t' << links.join( '\n\t' )
      it << '\n```'
    }
  }
}

task projectGraph( type:NpxTask ) {
  dependsOn projectGraphMarkup
  group 'documentation'
  description 'Generates project dependency graph'
  command = '@mermaid-js/mermaid-cli'
  args = [ '-i', 'mermaid.md', '-o', 'mermaid.svg' ]
}